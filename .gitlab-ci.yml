image: node:latest

stages:
  - build
  - test

cache:
  paths:
    - frontend/node_modules/

frontend_build:
  stage: build
  script:
    - cd frontend
    - npm install
    - CI=false npm run-script build

postman_test:
  stage: test
  script:
    - npm install -g newman
    - cd backend
    - newman run collection.json

frontend_jest_tests:
  stage: test
  script:
    - cd frontend
    - npm install
    - CI=true npm test

frontend_gui_test:
  stage: test
  image: python:3.6-stretch
  script:
  - cd frontend
  - pip3 install selenium

  # The following is derived from https://nander.cc/using-selenium-within-a-docker-container
  # Add chrome to container
  - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
  - sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
  - apt-get -y update
  - apt-get install -y google-chrome-stable

  # Download and unzip the chromedriver
  - apt-get install -yqq unzip
  - wget -O /tmp/chromedriver.zip http://chromedriver.storage.googleapis.com/`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE`/chromedriver_linux64.zip
  - unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/

  # Run selenium tests
  - python3 guitests.py

backend_unit_tests:
  variables:
    DB_LOGIN: $DB_LOGIN
  stage: test
  image: python:3.6-stretch
  script:
    - cd backend
    - pip3 install -r requirements.txt

    # Add credentials
    - cd data
    - touch credentials.py
    - echo -n "db_login = '" >> credentials.py
    - echo -n $DB_LOGIN >> credentials.py
    - echo "'" >> credentials.py
    - cd ..

    - python3 tests.py

